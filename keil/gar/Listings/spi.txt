; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\spi.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\spi.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\Library\Device\Nuvoton\Nano100Series\Include -I..\Library\StdDriver\inc -I..\Library\CMSIS\Include -IC:\Users\rui\AppData\Local\Arm\Packs\Nuvoton\NuMicro_DFP\1.3.19\Device\NANO100BN\Include -IC:\Keil\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=538 --omf_browse=.\objects\spi.crf ..\Library\StdDriver\src\spi.c]
                          THUMB

                          AREA ||i.SPI_ClearRxFIFO||, CODE, READONLY, ALIGN=1

                  SPI_ClearRxFIFO PROC
;;;90       */
;;;91     void SPI_ClearRxFIFO(SPI_T *spi)
000000  6bc1              LDR      r1,[r0,#0x3c]
;;;92     {
;;;93         spi->FFCTL |= SPI_FFCTL_RX_CLR_Msk;
000002  2201              MOVS     r2,#1
000004  4311              ORRS     r1,r1,r2
000006  63c1              STR      r1,[r0,#0x3c]
;;;94     }
000008  4770              BX       lr
;;;95     
                          ENDP


                          AREA ||i.SPI_ClearTxFIFO||, CODE, READONLY, ALIGN=1

                  SPI_ClearTxFIFO PROC
;;;100      */
;;;101    void SPI_ClearTxFIFO(SPI_T *spi)
000000  6bc1              LDR      r1,[r0,#0x3c]
;;;102    {
;;;103        spi->FFCTL |= SPI_FFCTL_TX_CLR_Msk;
000002  2202              MOVS     r2,#2
000004  4311              ORRS     r1,r1,r2
000006  63c1              STR      r1,[r0,#0x3c]
;;;104    }
000008  4770              BX       lr
;;;105    
                          ENDP


                          AREA ||i.SPI_Close||, CODE, READONLY, ALIGN=2

                  SPI_Close PROC
;;;65       */
;;;66     void SPI_Close(SPI_T *spi)
000000  4a0b              LDR      r2,|L3.48|
;;;67     {
;;;68         /* Reset SPI */
;;;69         if(spi == SPI0)
;;;70         {
;;;71             SYS->IPRST_CTL2 |= SYS_IPRST_CTL2_SPI0_RST_Msk;
000002  2105              MOVS     r1,#5
000004  0709              LSLS     r1,r1,#28
000006  4290              CMP      r0,r2                 ;69
000008  d102              BNE      |L3.16|
00000a  68ca              LDR      r2,[r1,#0xc]
00000c  1480              ASRS     r0,r0,#18
;;;72             SYS->IPRST_CTL2 &= ~SYS_IPRST_CTL2_SPI0_RST_Msk;
00000e  e008              B        |L3.34|
                  |L3.16|
;;;73         }
;;;74         else if(spi == SPI1)
000010  4a08              LDR      r2,|L3.52|
000012  4290              CMP      r0,r2
;;;75         {
;;;76             SYS->IPRST_CTL2 |= SYS_IPRST_CTL2_SPI1_RST_Msk;
;;;77             SYS->IPRST_CTL2 &= ~SYS_IPRST_CTL2_SPI1_RST_Msk;
;;;78         }
;;;79         else
;;;80         {
;;;81             SYS->IPRST_CTL2 |= SYS_IPRST_CTL2_SPI2_RST_Msk;
000014  68ca              LDR      r2,[r1,#0xc]
000016  d102              BNE      |L3.30|
000018  2001              MOVS     r0,#1                 ;76
00001a  0340              LSLS     r0,r0,#13             ;76
00001c  e001              B        |L3.34|
                  |L3.30|
00001e  2001              MOVS     r0,#1
000020  0380              LSLS     r0,r0,#14
                  |L3.34|
000022  4302              ORRS     r2,r2,r0              ;71
000024  60ca              STR      r2,[r1,#0xc]          ;71
000026  68ca              LDR      r2,[r1,#0xc]          ;72
000028  4382              BICS     r2,r2,r0              ;72
00002a  60ca              STR      r2,[r1,#0xc]          ;72
;;;82             SYS->IPRST_CTL2 &= ~SYS_IPRST_CTL2_SPI2_RST_Msk;
;;;83         }
;;;84     }
00002c  4770              BX       lr
;;;85     
                          ENDP

00002e  0000              DCW      0x0000
                  |L3.48|
                          DCD      0x40030000
                  |L3.52|
                          DCD      0x40130000

                          AREA ||i.SPI_DisableAutoSS||, CODE, READONLY, ALIGN=1

                  SPI_DisableAutoSS PROC
;;;110      */
;;;111    void SPI_DisableAutoSS(SPI_T *spi)
000000  68c1              LDR      r1,[r0,#0xc]
;;;112    {
;;;113        spi->SSR &= ~SPI_SSR_AUTOSS_Msk;
000002  2208              MOVS     r2,#8
000004  4391              BICS     r1,r1,r2
000006  60c1              STR      r1,[r0,#0xc]
;;;114    }
000008  4770              BX       lr
;;;115    
                          ENDP


                          AREA ||i.SPI_DisableFIFO||, CODE, READONLY, ALIGN=1

                  SPI_DisableFIFO PROC
;;;201      */
;;;202    void SPI_DisableFIFO(SPI_T *spi)
000000  6801              LDR      r1,[r0,#0]
;;;203    {
;;;204        spi->CTL &= ~SPI_CTL_FIFOM_Msk;
000002  2201              MOVS     r2,#1
000004  0552              LSLS     r2,r2,#21
000006  4391              BICS     r1,r1,r2
000008  6001              STR      r1,[r0,#0]
;;;205    }
00000a  4770              BX       lr
;;;206    
                          ENDP


                          AREA ||i.SPI_DisableInt||, CODE, READONLY, ALIGN=1

                  SPI_DisableInt PROC
;;;291      */
;;;292    void SPI_DisableInt(SPI_T *spi, uint32_t u32Mask)
000000  07ca              LSLS     r2,r1,#31
;;;293    {
000002  d004              BEQ      |L6.14|
;;;294        if((u32Mask & SPI_IE_MASK) == SPI_IE_MASK)
;;;295            spi->CTL &= ~SPI_CTL_INTEN_Msk;
000004  6802              LDR      r2,[r0,#0]
000006  2301              MOVS     r3,#1
000008  045b              LSLS     r3,r3,#17
00000a  439a              BICS     r2,r2,r3
00000c  6002              STR      r2,[r0,#0]
                  |L6.14|
;;;296    
;;;297        if((u32Mask & SPI_SSTA_INTEN_MASK) == SPI_SSTA_INTEN_MASK)
00000e  074a              LSLS     r2,r1,#29
000010  d504              BPL      |L6.28|
;;;298            spi->SSR &= ~SPI_SSR_SSTA_INTEN_Msk;
000012  68c2              LDR      r2,[r0,#0xc]
000014  2301              MOVS     r3,#1
000016  025b              LSLS     r3,r3,#9
000018  439a              BICS     r2,r2,r3
00001a  60c2              STR      r2,[r0,#0xc]
                  |L6.28|
;;;299    
;;;300        if((u32Mask & SPI_FIFO_TX_INTEN_MASK) == SPI_FIFO_TX_INTEN_MASK)
00001c  070a              LSLS     r2,r1,#28
00001e  d503              BPL      |L6.40|
;;;301            spi->FFCTL &= ~SPI_FFCTL_TX_INTEN_Msk;
000020  6bc2              LDR      r2,[r0,#0x3c]
000022  2308              MOVS     r3,#8
000024  439a              BICS     r2,r2,r3
000026  63c2              STR      r2,[r0,#0x3c]
                  |L6.40|
;;;302    
;;;303        if((u32Mask & SPI_FIFO_RX_INTEN_MASK) == SPI_FIFO_RX_INTEN_MASK)
000028  06ca              LSLS     r2,r1,#27
00002a  d503              BPL      |L6.52|
;;;304            spi->FFCTL &= ~SPI_FFCTL_RX_INTEN_Msk;
00002c  6bc2              LDR      r2,[r0,#0x3c]
00002e  2304              MOVS     r3,#4
000030  439a              BICS     r2,r2,r3
000032  63c2              STR      r2,[r0,#0x3c]
                  |L6.52|
;;;305    
;;;306        if((u32Mask & SPI_FIFO_RXOVR_INTEN_MASK) == SPI_FIFO_RXOVR_INTEN_MASK)
000034  068a              LSLS     r2,r1,#26
000036  d503              BPL      |L6.64|
;;;307            spi->FFCTL &= ~SPI_FFCTL_RXOVR_INTEN_Msk;
000038  6bc2              LDR      r2,[r0,#0x3c]
00003a  2310              MOVS     r3,#0x10
00003c  439a              BICS     r2,r2,r3
00003e  63c2              STR      r2,[r0,#0x3c]
                  |L6.64|
;;;308    
;;;309        if((u32Mask & SPI_FIFO_TIMEOUT_INTEN_MASK) == SPI_FIFO_TIMEOUT_INTEN_MASK)
000040  0649              LSLS     r1,r1,#25
000042  d503              BPL      |L6.76|
;;;310            spi->FFCTL &= ~SPI_FFCTL_TIMEOUT_EN_Msk;
000044  6bc1              LDR      r1,[r0,#0x3c]
000046  2280              MOVS     r2,#0x80
000048  4391              BICS     r1,r1,r2
00004a  63c1              STR      r1,[r0,#0x3c]
                  |L6.76|
;;;311    }
00004c  4770              BX       lr
;;;312    
                          ENDP


                          AREA ||i.SPI_DisableWakeup||, CODE, READONLY, ALIGN=1

                  SPI_DisableWakeup PROC
;;;327      */
;;;328    void SPI_DisableWakeup(SPI_T *spi)
000000  6801              LDR      r1,[r0,#0]
;;;329    {
;;;330        spi->CTL &= ~SPI_CTL_WKEUP_EN_Msk;
000002  0049              LSLS     r1,r1,#1
000004  0849              LSRS     r1,r1,#1
000006  6001              STR      r1,[r0,#0]
;;;331    }
000008  4770              BX       lr
;;;332    
                          ENDP


                          AREA ||i.SPI_EnableAutoSS||, CODE, READONLY, ALIGN=1

                  SPI_EnableAutoSS PROC
;;;126      */
;;;127    void SPI_EnableAutoSS(SPI_T *spi, uint32_t u32SSPinMask, uint32_t u32ActiveLevel)
000000  68c3              LDR      r3,[r0,#0xc]
;;;128    {
;;;129        spi->SSR = (spi->SSR & ~(SPI_SSR_SS_LVL_Msk | SPI_SSR_SSR_Msk)) | (u32SSPinMask | u32ActiveLevel) | SPI_SSR_AUTOSS_Msk;
000002  4311              ORRS     r1,r1,r2
000004  08db              LSRS     r3,r3,#3
000006  00db              LSLS     r3,r3,#3
000008  430b              ORRS     r3,r3,r1
00000a  2108              MOVS     r1,#8
00000c  430b              ORRS     r3,r3,r1
00000e  60c3              STR      r3,[r0,#0xc]
;;;130    }
000010  4770              BX       lr
;;;131    
                          ENDP


                          AREA ||i.SPI_EnableFIFO||, CODE, READONLY, ALIGN=1

                  SPI_EnableFIFO PROC
;;;187      */
;;;188    void SPI_EnableFIFO(SPI_T *spi, uint32_t u32TxThreshold, uint32_t u32RxThreshold)
000000  b510              PUSH     {r4,lr}
;;;189    {
;;;190        spi->FFCTL = (spi->FFCTL & ~(SPI_FFCTL_TX_THRESHOLD_Msk | SPI_FFCTL_RX_THRESHOLD_Msk) |
000002  6bc3              LDR      r3,[r0,#0x3c]
000004  2477              MOVS     r4,#0x77
000006  0624              LSLS     r4,r4,#24
000008  43a3              BICS     r3,r3,r4
00000a  0709              LSLS     r1,r1,#28
00000c  430b              ORRS     r3,r3,r1
00000e  0611              LSLS     r1,r2,#24
000010  430b              ORRS     r3,r3,r1
000012  63c3              STR      r3,[r0,#0x3c]
;;;191                      (u32TxThreshold << SPI_FFCTL_TX_THRESHOLD_Pos) |
;;;192                      (u32RxThreshold << SPI_FFCTL_RX_THRESHOLD_Pos));
;;;193    
;;;194        spi->CTL |= SPI_CTL_FIFOM_Msk;
000014  6801              LDR      r1,[r0,#0]
000016  2201              MOVS     r2,#1
000018  0552              LSLS     r2,r2,#21
00001a  4311              ORRS     r1,r1,r2
00001c  6001              STR      r1,[r0,#0]
;;;195    }
00001e  bd10              POP      {r4,pc}
;;;196    
                          ENDP


                          AREA ||i.SPI_EnableInt||, CODE, READONLY, ALIGN=1

                  SPI_EnableInt PROC
;;;256      */
;;;257    void SPI_EnableInt(SPI_T *spi, uint32_t u32Mask)
000000  07ca              LSLS     r2,r1,#31
;;;258    {
000002  d004              BEQ      |L10.14|
;;;259        if((u32Mask & SPI_IE_MASK) == SPI_IE_MASK)
;;;260            spi->CTL |= SPI_CTL_INTEN_Msk;
000004  6802              LDR      r2,[r0,#0]
000006  2301              MOVS     r3,#1
000008  045b              LSLS     r3,r3,#17
00000a  431a              ORRS     r2,r2,r3
00000c  6002              STR      r2,[r0,#0]
                  |L10.14|
;;;261    
;;;262        if((u32Mask & SPI_SSTA_INTEN_MASK) == SPI_SSTA_INTEN_MASK)
00000e  074a              LSLS     r2,r1,#29
000010  d504              BPL      |L10.28|
;;;263            spi->SSR |= SPI_SSR_SSTA_INTEN_Msk;
000012  68c2              LDR      r2,[r0,#0xc]
000014  2301              MOVS     r3,#1
000016  025b              LSLS     r3,r3,#9
000018  431a              ORRS     r2,r2,r3
00001a  60c2              STR      r2,[r0,#0xc]
                  |L10.28|
;;;264    
;;;265        if((u32Mask & SPI_FIFO_TX_INTEN_MASK) == SPI_FIFO_TX_INTEN_MASK)
00001c  070a              LSLS     r2,r1,#28
00001e  d503              BPL      |L10.40|
;;;266            spi->FFCTL |= SPI_FFCTL_TX_INTEN_Msk;
000020  6bc2              LDR      r2,[r0,#0x3c]
000022  2308              MOVS     r3,#8
000024  431a              ORRS     r2,r2,r3
000026  63c2              STR      r2,[r0,#0x3c]
                  |L10.40|
;;;267    
;;;268        if((u32Mask & SPI_FIFO_RX_INTEN_MASK) == SPI_FIFO_RX_INTEN_MASK)
000028  06ca              LSLS     r2,r1,#27
00002a  d503              BPL      |L10.52|
;;;269            spi->FFCTL |= SPI_FFCTL_RX_INTEN_Msk;
00002c  6bc2              LDR      r2,[r0,#0x3c]
00002e  2304              MOVS     r3,#4
000030  431a              ORRS     r2,r2,r3
000032  63c2              STR      r2,[r0,#0x3c]
                  |L10.52|
;;;270    
;;;271        if((u32Mask & SPI_FIFO_RXOVR_INTEN_MASK) == SPI_FIFO_RXOVR_INTEN_MASK)
000034  068a              LSLS     r2,r1,#26
000036  d503              BPL      |L10.64|
;;;272            spi->FFCTL |= SPI_FFCTL_RXOVR_INTEN_Msk;
000038  6bc2              LDR      r2,[r0,#0x3c]
00003a  2310              MOVS     r3,#0x10
00003c  431a              ORRS     r2,r2,r3
00003e  63c2              STR      r2,[r0,#0x3c]
                  |L10.64|
;;;273    
;;;274        if((u32Mask & SPI_FIFO_TIMEOUT_INTEN_MASK) == SPI_FIFO_TIMEOUT_INTEN_MASK)
000040  0649              LSLS     r1,r1,#25
000042  d503              BPL      |L10.76|
;;;275            spi->FFCTL |= SPI_FFCTL_TIMEOUT_EN_Msk;
000044  6bc1              LDR      r1,[r0,#0x3c]
000046  2280              MOVS     r2,#0x80
000048  4311              ORRS     r1,r1,r2
00004a  63c1              STR      r1,[r0,#0x3c]
                  |L10.76|
;;;276    }
00004c  4770              BX       lr
;;;277    
                          ENDP


                          AREA ||i.SPI_EnableWakeup||, CODE, READONLY, ALIGN=1

                  SPI_EnableWakeup PROC
;;;317      */
;;;318    void SPI_EnableWakeup(SPI_T *spi)
000000  6801              LDR      r1,[r0,#0]
;;;319    {
;;;320        spi->CTL |= SPI_CTL_WKEUP_EN_Msk;
000002  2201              MOVS     r2,#1
000004  07d2              LSLS     r2,r2,#31
000006  4311              ORRS     r1,r1,r2
000008  6001              STR      r1,[r0,#0]
;;;321    }
00000a  4770              BX       lr
;;;322    
                          ENDP


                          AREA ||i.SPI_GetBusClock||, CODE, READONLY, ALIGN=2

                  SPI_GetBusClock PROC
;;;211      */
;;;212    uint32_t SPI_GetBusClock(SPI_T *spi)
000000  b510              PUSH     {r4,lr}
;;;213    {
000002  4604              MOV      r4,r0
;;;214        uint32_t u32Div;
;;;215        uint32_t u32ClkSrc;
;;;216    
;;;217        if(spi == SPI0)
000004  490d              LDR      r1,|L12.60|
;;;218        {
;;;219            if((CLK->CLKSEL2 & CLK_CLKSEL2_SPI0_S_Msk) == CLK_CLKSEL2_SPI0_S_HCLK)
000006  480e              LDR      r0,|L12.64|
000008  428c              CMP      r4,r1                 ;217
00000a  d102              BNE      |L12.18|
00000c  6980              LDR      r0,[r0,#0x18]
00000e  02c0              LSLS     r0,r0,#11
000010  e004              B        |L12.28|
                  |L12.18|
;;;220                u32ClkSrc = CLK_GetHCLKFreq();
;;;221            else
;;;222                u32ClkSrc = CLK_GetPLLClockFreq();
;;;223        }
;;;224        else if(spi == SPI1)
000012  490c              LDR      r1,|L12.68|
;;;225        {
;;;226            if((CLK->CLKSEL2 & CLK_CLKSEL2_SPI1_S_Msk) == CLK_CLKSEL2_SPI1_S_HCLK)
;;;227                u32ClkSrc = CLK_GetHCLKFreq();
;;;228            else
;;;229                u32ClkSrc = CLK_GetPLLClockFreq();
;;;230        }
;;;231        else
;;;232        {
;;;233            if((CLK->CLKSEL2 & CLK_CLKSEL2_SPI2_S_Msk) == CLK_CLKSEL2_SPI2_S_HCLK)
000014  6980              LDR      r0,[r0,#0x18]
000016  428c              CMP      r4,r1                 ;224
000018  d105              BNE      |L12.38|
00001a  0280              LSLS     r0,r0,#10             ;226
                  |L12.28|
00001c  2800              CMP      r0,#0                 ;219
00001e  da04              BGE      |L12.42|
;;;234                u32ClkSrc = CLK_GetHCLKFreq();
000020  f7fffffe          BL       CLK_GetHCLKFreq
000024  e003              B        |L12.46|
                  |L12.38|
000026  0240              LSLS     r0,r0,#9              ;233
000028  e7f8              B        |L12.28|
                  |L12.42|
;;;235            else
;;;236                u32ClkSrc = CLK_GetPLLClockFreq();
00002a  f7fffffe          BL       CLK_GetPLLClockFreq
                  |L12.46|
;;;237        }
;;;238    
;;;239        u32Div = spi->CLKDIV & SPI_CLKDIV_DIVIDER1_Msk;
00002e  68a1              LDR      r1,[r4,#8]
000030  b2c9              UXTB     r1,r1
000032  1c49              ADDS     r1,r1,#1
;;;240        return (u32ClkSrc / (u32Div + 1));
000034  f7fffffe          BL       __aeabi_uidivmod
;;;241    }
000038  bd10              POP      {r4,pc}
;;;242    
                          ENDP

00003a  0000              DCW      0x0000
                  |L12.60|
                          DCD      0x40030000
                  |L12.64|
                          DCD      0x50000200
                  |L12.68|
                          DCD      0x40130000

                          AREA ||i.SPI_Open||, CODE, READONLY, ALIGN=1

                  SPI_Open PROC
;;;46       */
;;;47     uint32_t SPI_Open(SPI_T *spi,
000000  b510              PUSH     {r4,lr}
;;;48                       uint32_t u32MasterSlave,
;;;49                       uint32_t u32SPIMode,
;;;50                       uint32_t u32DataWidth,
;;;51                       uint32_t u32BusClock)
;;;52     {
;;;53         if(u32DataWidth == 32)
000002  9c02              LDR      r4,[sp,#8]
000004  2b20              CMP      r3,#0x20
000006  d100              BNE      |L13.10|
;;;54             u32DataWidth = 0;
000008  2300              MOVS     r3,#0
                  |L13.10|
;;;55     
;;;56         spi->CTL = u32MasterSlave | (u32DataWidth << SPI_CTL_TX_BIT_LEN_Pos) | (u32SPIMode);
00000a  00db              LSLS     r3,r3,#3
00000c  430b              ORRS     r3,r3,r1
00000e  4313              ORRS     r3,r3,r2
000010  6003              STR      r3,[r0,#0]
;;;57     
;;;58         return ( SPI_SetBusClock(spi, u32BusClock) );
000012  4621              MOV      r1,r4
000014  f7fffffe          BL       SPI_SetBusClock
;;;59     }
000018  bd10              POP      {r4,pc}
;;;60     
                          ENDP


                          AREA ||i.SPI_SetBusClock||, CODE, READONLY, ALIGN=2

                  SPI_SetBusClock PROC
;;;137      */
;;;138    uint32_t SPI_SetBusClock(SPI_T *spi, uint32_t u32BusClock)
000000  b5f8              PUSH     {r3-r7,lr}
;;;139    {
000002  460f              MOV      r7,r1
000004  4606              MOV      r6,r0
;;;140        uint32_t u32ClkSrc, u32Div = 0;
;;;141    
;;;142        if(spi == SPI0)
000006  4917              LDR      r1,|L14.100|
000008  2500              MOVS     r5,#0                 ;140
;;;143        {
;;;144            if((CLK->CLKSEL2 & CLK_CLKSEL2_SPI0_S_Msk) == CLK_CLKSEL2_SPI0_S_HCLK)
00000a  4817              LDR      r0,|L14.104|
00000c  428e              CMP      r6,r1                 ;142
00000e  d11f              BNE      |L14.80|
000010  6980              LDR      r0,[r0,#0x18]
000012  02c0              LSLS     r0,r0,#11
000014  e023              B        |L14.94|
                  |L14.22|
;;;145                u32ClkSrc = CLK_GetHCLKFreq();
000016  f7fffffe          BL       CLK_GetHCLKFreq
00001a  e001              B        |L14.32|
                  |L14.28|
;;;146            else
;;;147                u32ClkSrc = CLK_GetPLLClockFreq();
00001c  f7fffffe          BL       CLK_GetPLLClockFreq
                  |L14.32|
;;;148        }
;;;149        else if(spi == SPI1)
;;;150        {
;;;151            if((CLK->CLKSEL2 & CLK_CLKSEL2_SPI1_S_Msk) == CLK_CLKSEL2_SPI1_S_HCLK)
;;;152                u32ClkSrc = CLK_GetHCLKFreq();
;;;153            else
;;;154                u32ClkSrc = CLK_GetPLLClockFreq();
;;;155        }
;;;156        else
;;;157        {
;;;158            if((CLK->CLKSEL2 & CLK_CLKSEL2_SPI2_S_Msk) == CLK_CLKSEL2_SPI2_S_HCLK)
;;;159                u32ClkSrc = CLK_GetHCLKFreq();
000020  4604              MOV      r4,r0
;;;160            else
;;;161                u32ClkSrc = CLK_GetPLLClockFreq();
;;;162        }
;;;163    
;;;164        if(u32BusClock > u32ClkSrc)
000022  42a7              CMP      r7,r4
000024  d900              BLS      |L14.40|
;;;165            u32BusClock = u32ClkSrc;
000026  4607              MOV      r7,r0
                  |L14.40|
;;;166    
;;;167        if(u32BusClock != 0 )
000028  2f00              CMP      r7,#0
00002a  d007              BEQ      |L14.60|
;;;168        {
;;;169            u32Div = (u32ClkSrc / u32BusClock) - 1;
00002c  4639              MOV      r1,r7
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       __aeabi_uidivmod
000034  1e45              SUBS     r5,r0,#1
;;;170            if(u32Div > SPI_CLKDIV_DIVIDER1_Msk)
000036  2dff              CMP      r5,#0xff
000038  d900              BLS      |L14.60|
;;;171                u32Div = SPI_CLKDIV_DIVIDER1_Msk;
00003a  25ff              MOVS     r5,#0xff
                  |L14.60|
;;;172        }
;;;173        else
;;;174            u32Div = 0;
;;;175    
;;;176        spi->CLKDIV = (spi->CLKDIV & ~SPI_CLKDIV_DIVIDER1_Msk) | u32Div;
00003c  68b0              LDR      r0,[r6,#8]
00003e  0a00              LSRS     r0,r0,#8
000040  0200              LSLS     r0,r0,#8
000042  4328              ORRS     r0,r0,r5
000044  60b0              STR      r0,[r6,#8]
;;;177    
;;;178        return ( u32ClkSrc / (u32Div+1) );
000046  1c69              ADDS     r1,r5,#1
000048  4620              MOV      r0,r4
00004a  f7fffffe          BL       __aeabi_uidivmod
;;;179    }
00004e  bdf8              POP      {r3-r7,pc}
                  |L14.80|
000050  4906              LDR      r1,|L14.108|
000052  6980              LDR      r0,[r0,#0x18]         ;158
000054  428e              CMP      r6,r1                 ;149
000056  d101              BNE      |L14.92|
000058  0280              LSLS     r0,r0,#10             ;151
00005a  e000              B        |L14.94|
                  |L14.92|
00005c  0240              LSLS     r0,r0,#9              ;158
                  |L14.94|
00005e  2800              CMP      r0,#0                 ;158
000060  dadc              BGE      |L14.28|
000062  e7d8              B        |L14.22|
;;;180    
                          ENDP

                  |L14.100|
                          DCD      0x40030000
                  |L14.104|
                          DCD      0x50000200
                  |L14.108|
                          DCD      0x40130000

;*** Start embedded assembler ***

#line 1 "..\\Library\\StdDriver\\src\\spi.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_spi_c_SPI_Open____REV16|
#line 388 "..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___5_spi_c_SPI_Open____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_spi_c_SPI_Open____REVSH|
#line 402
|__asm___5_spi_c_SPI_Open____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
